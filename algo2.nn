% Algorithmique et structures de données 2 de Paul CALDERON est mis à disposition
% selon les termes de la licence Creative Commons Attribution - Partage dans les
% Mêmes Conditions 4.0 International. Pour accéder à une copie de cette licence,
% merci de vous rendre à l'adresse suivante
% http://creativecommons.org/licenses/by-sa/4.0/ ou envoyez un courrier à Creative
% Commons, 444 Castro Street, Suite 900, Mountain View, California, 94041, USA.



# Algorithmique et structures de données 2

## Analyse du coût d'un algorithme

### Qu'est ce la complexité ?

Un programme informatique utilise de la mémoire, consomme de l'énergie et prend un certain temps à l’exécution, c'est la complexité d'un algorithme. Dans la suite de ce cours nous nous intéresserons à la complexité temporelle.

Connaître la complexité temporelle d'un algorithme ne permet pas de connaître le temps mis à l’exécution car il dépend de la machine utilisée. Cependant la complexité correspond au comportement d'un algorithme, c'est à dire comment évolue le temps d’exécution en fonction de la taille des données.\
La complexité est toujours donnée en fonctions de certains types de calcul (opérations arithmétiques, affectations...)

### Outils mathématiques

La complexité s'exprime asymptotiquement (lorsque les données tendent vers l'infini) pour cela on va utiliser les notations suivante. Si $$f, g$$ sont des fonctions alors\
**$$f=O(g)$$** si il existe $$a>0 $$ tel que pour tout $$x$$, $$|f(x)| < a |g(x)|$$  
**$$f=\Omega (g)$$** si il existe $$a>0 $$ tel que pour tout $$x$$, $$|g(x)| < a |f(x)|$$  
**$$f=\Theta (g)$$** si il existe $$a>0$$ et $$b>0$$ tel que pour tout $$x$$ on a : $$a |g(x)| < |f(x)| < a |g(x)|$$  

### Différents coûts

**Pire cas** : c'est le coût lorsque le maximum d'opération est fait lors de l’exécution.  
**Meilleur cas** : c'est le coût lorsque le minimum d'opération est fait lors de l’exécution.  
**Coût en moyenne** : c'est la moyenne de tous les coûts possibles, pondéré par leur probabilité.  
**Coût amorti** : c'est le nombre d'opérations moyen effectué lors d'appels multiples d'un algorithme.

### Coût amorti

Il existe deux méthodes pour calculer le coût amorti d'un algorithme, la méthode par agrégats et la méthode par potentiel.

#### Méthode par agrégats

Dans l'analyse par agrégat on va montrer que pour toutes suites de n opérations on prend un temps $$T_n$$ et calculer le rapport $$\frac{T_n}{n}$$, c'est le coût amorti.

#### Méthode par potentiels

A chaque série de i opérations on associe une valeur $$\phi _i$$ qui est le potentiel en i.
Le coût amorti de l'opération i est alors : $$C_i^{amortie} = C_i+ \phi _i - \phi _{i-1}$$ \
Le coût amorti des n opérations est : $$C_{amortie} = \sum_{i=1}^n C_i^{amortie} = \sum_{i=1}^n (C_i+ \phi _i - \phi _{i-1}) = \sum_{i=1}^n C_i+ \phi _n - \phi _{0}$$

~~~ question
Calculer la complexité en fonction du nombre de comparaison dans le pire cas, dans le meilleur cas et la complexité moyenne de l'algorithme suivant.\
T tableau indicé de 1 à n, x
a = T[0]  
k=0  
Tant que $$a \neq x$$ et $$k \leq n$$  
Faire  
a=T[n]  
k=k+1  
Fin Tant que.
~~~

~~~ answer
**meilleur cas**\
T[0]=x, il n'y a aucun parcours de la boucle, complexité : $$O(1)$$ \
**pire cas** \
x n'est pas présent dans le tableau, on parcourt n+1 fois la boucle en effectuant toujours deux comparaisons, complexité : $$O(n)$$ \
**coût moyen** \
On peut faire l'hypothèse que la probabilité que la première occurrence de x dans T à la case i est $$\frac{1}{n+1}$$.
Si x apparaît à la case i alors 2(i+1) opérations de comparaisons sont effectuées.
On peut donc écrire : $$C_{moyen} = \sum_{i=0}^{n} c(i).p(i)$$ avec $$c(i)=2(i+1)$$ et $$(p(i)=p= \frac{1}{n+1}$$ \
donc $$C_{moyen} = 2(n+1) = O(n)$$
~~~

~~~ question
Soit incr, la fonction incrémentant de un un nombre binaire sur n bits. Quel est le pire cas, le meilleur cas ?
Quel est le coût amorti de la fonction incr ?
~~~

~~~ answer
**meilleur cas** \
le bit de poids faible est à 0, le coût est alors constant. \
**pire cas** \
tout les bits sont à un, il faut donc parcourir tout le nombre pour propager la retenue, coût : $$O(n)$$. \
**coût amorti** \
Sur k appels à incr, comptons le nombre de fois où le bit i change de valeur. \
le bit 1 change à chaque appel de incr donc k fois \
le bit 2 change une fois sur deux donc $$ int(k/2)$$ , (int : partie entière inférieure). \
donc le bit i change de valeur $$int(\frac{k}{2^{i-1}})$$ \
D’où : $$C_{amorti} = \frac{1}{k} \sum_{i=1}^{k} int(\frac{k}{2^{i-1}}) \leq \sum_{i>0} \frac{1}{2^{i-1}} \leq 2$$ \
Le coût amorti est donc en $$O(1)$$.
~~~
